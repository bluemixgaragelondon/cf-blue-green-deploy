#!/bin/bash

trap cleanup EXIT

cleanup() {
  TEST_ACCEPTANCE_LOG="${TEST_ACCEPTANCE_LOG:?Must be defined in .env}"

  rm -f "$TEST_ACCEPTANCE_LOG"
}

main() {
  . script/with_env
  . script/common

  if [ -z "$TURBO" ]
  then
    TEST_ACCEPTANCE_APP_HOSTNAME="${TEST_ACCEPTANCE_APP_HOSTNAME:?Must be defined in .env}"
    TEST_ACCEPTANCE_APP_NAME="${TEST_ACCEPTANCE_APP_NAME:=$TEST_ACCEPTANCE_APP_HOSTNAME}"
    push_example_apps "$TEST_ACCEPTANCE_APP_NAME" "$TEST_ACCEPTANCE_APP_HOSTNAME"
  fi

  pushd acceptance/app >/dev/null
    assert_plugin_output_includes_successful_smoke_test_output
    ignore_any_failures
    assert_plugin_fails_if_smoke_test_script_fails
  popd >/dev/null

 pushd acceptance/app-with-strangely-named-manifest >/dev/null
    assert_plugin_runs_cleanly_if_manifest_is_specified
    ignore_any_failures
  popd >/dev/null

  printf "\nACCEPTANCE TESTS PASSED!"
}

ignore_any_failures() {
  set +e
}

assert_plugin_output_includes_successful_smoke_test_output() {
  TEST_ACCEPTANCE_LOG="${TEST_ACCEPTANCE_LOG:?Must be defined in .env}"

  local smoke_test_script="script/smoke_test"
  local smoke_test_output="Hello world from my Go program!"

  cf bgd "$TEST_ACCEPTANCE_APP_NAME" --smoke-test "$smoke_test_script" | tee "$TEST_ACCEPTANCE_LOG"

  if ! grep "$smoke_test_output" "$TEST_ACCEPTANCE_LOG"
  then
    printf "\n\nExpected cf bgd to include '%s' from %s output\n" "$smoke_test_output" "$smoke_test_script"
    exit 1
  fi
}

assert_plugin_fails_if_smoke_test_script_fails() {
  TEST_ACCEPTANCE_LOG="${TEST_ACCEPTANCE_LOG:?Must be defined in .env}"

  local smoke_test_script="script/smoke_test"
  local expected_output_last_line="Deploy failed: Smoke tests failed: exit status 1"

	set -o pipefail
  cf bgd "${TEST_ACCEPTANCE_APP_NAME}-FORCE-SMOKE-TEST-FAILURE" --smoke-test $smoke_test_script 2>&1 | tee "$TEST_ACCEPTANCE_LOG"
	local cf_bgd_exit_code=$?

  if [ $cf_bgd_exit_code != 1 ]
	then
    printf "\n\nExpected cf bgd to exit with exit code 1, it exited with %s" $cf_bgd_exit_code
    exit 1
	fi

  if [ "$(tail -n 1 "$TEST_ACCEPTANCE_LOG")" != "$expected_output_last_line" ]
  then
    printf "\n\nExpected cf bgd to stop with %s\n" "$expected_output_last_line"
    exit 1
  fi
}

assert_plugin_runs_cleanly_if_manifest_is_specified() {
  TEST_ACCEPTANCE_LOG="${TEST_ACCEPTANCE_LOG:?Must be defined in .env}"

  cf bgd "$TEST_ACCEPTANCE_APP_NAME" -f strangely-named-manifest.yml | tee "$TEST_ACCEPTANCE_LOG"

  # THIS IS CURRENTLY BROKEN BECAUSE APP NAME IS NOT PICKED UP FROM MANIFEST BEFORE SUBSEQUENT PROCESSING
  # IS DONE. NEEDS TO BE FIXED BEFORE ANYTHING CAN BE MERGED.

  if [ $? -ne 0 ]
  then
    printf "\n\nExpected return code to be 0."
    exit 1
  fi
}


main
